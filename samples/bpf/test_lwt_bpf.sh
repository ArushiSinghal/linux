#!/bin/bash

# Uncomment to see generated bytecode
#VERBOSE=verbose

NS=lwt_ns
VETH0=tst_lwt0
VETH1=tst_lwt1
IP4_1="192.168.254.1"
IP4_2="192.168.254.2"
IP4_3="192.168.254.3"
IP4_4="192.168.254.4"

TRACE_ROOT=/sys/kernel/debug/tracing

function hton_mac()
{
	MAC="${1//:/}"
	echo "0x${MAC:10:2}${MAC:8:2}${MAC:6:2}${MAC:4:2}${MAC:2:2}${MAC:0:2}"
}

function lookup_mac()
{
	set +x
	if [ ! -z "$2" ]; then
		MAC=$(ip netns exec $2 ip link show $1 | grep ether | awk '{print $2}')
	else
		MAC=$(ip link show $1 | grep ether | awk '{print $2}')
	fi
	echo $(hton_mac $MAC)
	set -x
}

function cleanup {
        set +ex
        rm lwt_bpf.o 2> /dev/null
        ip link del $VETH0 2> /dev/null
        ip netns delete $NS 2> /dev/null
        set -ex
}

function setup_veth {
        ip netns add $NS

        ip link add $VETH0 type veth peer name $VETH1

        ip link set dev $VETH0 up
        ip addr add ${IP4_1}/24 dev $VETH0

        ip link set $VETH1 netns $NS
        ip netns exec $NS ip link set dev $VETH1 up
        ip netns exec $NS ip addr add ${IP4_2}/24 dev $VETH1
        ip netns exec $NS ip addr add ${IP4_3}/32 dev $VETH1

        echo 1 > ${TRACE_ROOT}/tracing_on
}

function get_trace {
	set +x
        cat ${TRACE_ROOT}/trace | grep -v '^#'
	set -x
}

function install_prog {
	ip route del ${IP4_2}/32 dev $VETH0 2> /dev/null || true
	ip route del table local local ${IP4_4}/32 dev lo 2> /dev/null || true
	cp /dev/null ${TRACE_ROOT}/trace

	OPTS="encap bpf $1 obj lwt_bpf.o section $2 $VERBOSE"

	if [ "$1" == "in" ];  then
		ip route add table local local ${IP4_4}/32 $OPTS dev lo
	else
		ip route add ${IP4_2}/32 $OPTS dev $VETH0
	fi
}

function remove_prog {
	if [ "$1" == "in" ];  then
		ip route del table local local ${IP4_4}/32 dev lo
	else
		ip route del ${IP4_2}/32 dev $VETH0
	fi
}

function filter_trace {
	# Add newline to allow starting EXPECT= variables on newline
	NL=$'\n'
	echo "${NL}$*" | sed -e 's/^.*: : //g'
}

function expect_fail {
	set +x
	echo "FAIL:"
	echo "Expected: $1"
	echo "Got: $2"
	set -x
	exit 1
}

function match_trace {
	set +x
	RET=0
	TRACE=$1
	EXPECT=$2
	GOT="$(filter_trace "$TRACE")"

	[ "$GOT" != "$EXPECT" ] && {
		expect_fail "$EXPECT" "$GOT"
		RET=1
	}
	set -x
	return $RET
}

function test_start {
	set +x
	echo "----------------------------------------------------------------"
	echo "Starting test: $*"
	echo "----------------------------------------------------------------"
	set -x
}

function failure {
	get_trace
	echo "FAIL: $*"
	exit 1
}

function test_ctx_xmit {
	test_start "test_ctx on lwt xmit"
	install_prog xmit ctx_test
	ping -c 3 $IP4_2 || {
		failure "test_ctx xmit: packets are dropped"
	}
	match_trace "$(get_trace)" "
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 0 ifindex $DST_IFINDEX
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 0 ifindex $DST_IFINDEX
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 0 ifindex $DST_IFINDEX" || exit 1
	remove_prog xmit
}

function test_ctx_out {
	test_start "test_ctx on lwt out"
	install_prog out ctx_test
	ping -c 3 $IP4_2 || {
		failure "test_ctx out: packets are dropped"
	}
	match_trace "$(get_trace)" "
len 84 hash 0 protocol 0
cb 1234 ingress_ifindex 0 ifindex 0
len 84 hash 0 protocol 0
cb 1234 ingress_ifindex 0 ifindex 0
len 84 hash 0 protocol 0
cb 1234 ingress_ifindex 0 ifindex 0" || exit 1
	remove_prog out
}

function test_ctx_in {
	test_start "test_ctx on lwt in"
	install_prog in ctx_test
	ping -c 3 $IP4_4 || {
		failure "test_ctx out: packets are dropped"
	}
	# We will both request & reply packets as the packets will
	# be from $IP4_4 => $IP4_4
	match_trace "$(get_trace)" "
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 1 ifindex 1
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 1 ifindex 1
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 1 ifindex 1
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 1 ifindex 1
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 1 ifindex 1
len 84 hash 0 protocol 8
cb 1234 ingress_ifindex 1 ifindex 1" || exit 1
	remove_prog in
}

function test_data {
	test_start "test_data on lwt $1"
	install_prog $1 data_test
	ping -c 3 $IP4_2 || {
		failure "test_data ${1}: packets are dropped"
	}
	match_trace "$(get_trace)" "
src: 1fea8c0 dst: 2fea8c0
src: 1fea8c0 dst: 2fea8c0
src: 1fea8c0 dst: 2fea8c0" || exit 1
	remove_prog $1
}

function test_data_in {
	test_start "test_data on lwt in"
	install_prog in data_test
	ping -c 3 $IP4_4 || {
		failure "test_data in: packets are dropped"
	}
	# We will both request & reply packets as the packets will
	# be from $IP4_4 => $IP4_4
	match_trace "$(get_trace)" "
src: 4fea8c0 dst: 4fea8c0
src: 4fea8c0 dst: 4fea8c0
src: 4fea8c0 dst: 4fea8c0
src: 4fea8c0 dst: 4fea8c0
src: 4fea8c0 dst: 4fea8c0
src: 4fea8c0 dst: 4fea8c0" || exit 1
	remove_prog in
}

function test_cb {
	test_start "test_cb on lwt $1"
	install_prog $1 print_cb
	ping -c 3 $IP4_2 || {
		failure "test_cb ${1}: packets are dropped"
	}
	match_trace "$(get_trace)" "
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0" || exit 1
	remove_prog $1
}

function test_cb_in {
	test_start "test_cb on lwt in"
	install_prog in print_cb
	ping -c 3 $IP4_4 || {
		failure "test_cb in: packets are dropped"
	}
	# We will both request & reply packets as the packets will
	# be from $IP4_4 => $IP4_4
	match_trace "$(get_trace)" "
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0
cb0: 0 cb1: 0 cb2: 0
cb3: 0 cb4: 0" || exit 1
	remove_prog in
}

function test_drop_all {
	test_start "test_drop_all on lwt $1"
	install_prog $1 drop_all
	ping -c 3 $IP4_2 && {
		failure "test_drop_all ${1}: Unexpected success of ping"
	}
	match_trace "$(get_trace)" "
dropping with: 2
dropping with: 2
dropping with: 2" || exit 1
	remove_prog $1
}

function test_drop_all_in {
	test_start "test_drop_all on lwt in"
	install_prog in drop_all
	ping -c 3 $IP4_4 && {
		failure "test_drop_all in: Unexpected success of ping"
	}
	match_trace "$(get_trace)" "
dropping with: 2
dropping with: 2
dropping with: 2" || exit 1
	remove_prog in
}

function test_redirect_xmit {
	test_start "test_redirect on lwt xmit"
	install_prog xmit redirect
	ping -c 3 $IP4_2 || {
		failure "Redirected packets appear to be dropped"
	}
	match_trace "$(get_trace)" "
redirected to $DST_IFINDEX
redirected to $DST_IFINDEX
redirected to $DST_IFINDEX" || exit 1
	remove_prog xmit
}

function test_rw_out {
	test_start "test_rw on lwt out"
	install_prog out rw_out
	ping -c 3 $IP4_2 || {
		failure "FAIL: Redirected packets appear to be dropped"
	}
	match_trace "$(get_trace)" "
redirected to $DST_IFINDEX
redirected to $DST_IFINDEX
redirected to $DST_IFINDEX" || exit 1
	remove_prog out
}

cleanup
setup_veth

DST_MAC=$(lookup_mac $VETH1 $NS)
SRC_MAC=$(lookup_mac $VETH0)
DST_IFINDEX=$(cat /sys/class/net/$VETH0/ifindex)

CLANG_OPTS="-O2 -target bpf -I ../include/"
CLANG_OPTS+=" -DSRC_MAC=$SRC_MAC -DDST_MAC=$DST_MAC -DDST_IFINDEX=$DST_IFINDEX"
clang $CLANG_OPTS -c lwt_bpf.c -o lwt_bpf.o

test_ctx_xmit
test_ctx_out
test_ctx_in
test_data "xmit"
test_data "out"
test_data_in
test_cb "xmit"
test_cb "out"
test_cb_in
test_drop_all "xmit"
test_drop_all "out"
test_drop_all_in
test_redirect_xmit
test_rw_out

cleanup
echo 0 > ${TRACE_ROOT}/tracing_on
exit 0
