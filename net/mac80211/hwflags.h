/*
 * Copyright 2015	Intel Deutschland GmbH
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __mac80211_hwflags_h
#define __mac80211_hwflags_h
#include <linux/jump_label.h>
#include <net/mac80211.h>

extern struct static_key hwflags_keys[NUM_IEEE80211_HW_FLAGS];

#ifdef CONFIG_JUMP_LABEL
#if (defined(CONFIG_MAC80211_HW_HAS_RATE_CONTROL_ON) &&	\
     defined(CONFIG_MAC80211_HW_HAS_RATE_CONTROL_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_HAS_RATE_CONTROL_ON) &&	\
     !defined(CONFIG_MAC80211_HW_HAS_RATE_CONTROL_OFF))
#define HWFLAGS_CHECK_HAS_RATE_CONTROL(flags) \
	test_bit(IEEE80211_HW_HAS_RATE_CONTROL, flags)
#define HWFLAGS_DEFSTATE_HAS_RATE_CONTROL -1
#elif defined(CONFIG_MAC80211_HW_HAS_RATE_CONTROL_ON)
#define HWFLAGS_CHECK_HAS_RATE_CONTROL(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_HAS_RATE_CONTROL]) || \
	 test_bit(IEEE80211_HW_HAS_RATE_CONTROL, flags))
#define HWFLAGS_DEFSTATE_HAS_RATE_CONTROL 1
#else /* CONFIG_MAC80211_HW_HAS_RATE_CONTROL_OFF */
#define HWFLAGS_CHECK_HAS_RATE_CONTROL(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_HAS_RATE_CONTROL]) && \
	 test_bit(IEEE80211_HW_HAS_RATE_CONTROL, flags))
#define HWFLAGS_DEFSTATE_HAS_RATE_CONTROL 0
#endif /* CONFIG_MAC80211_HW_HAS_RATE_CONTROL_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_RX_INCLUDES_FCS_ON) &&	\
     defined(CONFIG_MAC80211_HW_RX_INCLUDES_FCS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_RX_INCLUDES_FCS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_RX_INCLUDES_FCS_OFF))
#define HWFLAGS_CHECK_RX_INCLUDES_FCS(flags) \
	test_bit(IEEE80211_HW_RX_INCLUDES_FCS, flags)
#define HWFLAGS_DEFSTATE_RX_INCLUDES_FCS -1
#elif defined(CONFIG_MAC80211_HW_RX_INCLUDES_FCS_ON)
#define HWFLAGS_CHECK_RX_INCLUDES_FCS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_RX_INCLUDES_FCS]) || \
	 test_bit(IEEE80211_HW_RX_INCLUDES_FCS, flags))
#define HWFLAGS_DEFSTATE_RX_INCLUDES_FCS 1
#else /* CONFIG_MAC80211_HW_RX_INCLUDES_FCS_OFF */
#define HWFLAGS_CHECK_RX_INCLUDES_FCS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_RX_INCLUDES_FCS]) && \
	 test_bit(IEEE80211_HW_RX_INCLUDES_FCS, flags))
#define HWFLAGS_DEFSTATE_RX_INCLUDES_FCS 0
#endif /* CONFIG_MAC80211_HW_RX_INCLUDES_FCS_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_ON) &&	\
     defined(CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_ON) &&	\
     !defined(CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_OFF))
#define HWFLAGS_CHECK_HOST_BROADCAST_PS_BUFFERING(flags) \
	test_bit(IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING, flags)
#define HWFLAGS_DEFSTATE_HOST_BROADCAST_PS_BUFFERING -1
#elif defined(CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_ON)
#define HWFLAGS_CHECK_HOST_BROADCAST_PS_BUFFERING(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING]) || \
	 test_bit(IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING, flags))
#define HWFLAGS_DEFSTATE_HOST_BROADCAST_PS_BUFFERING 1
#else /* CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_OFF */
#define HWFLAGS_CHECK_HOST_BROADCAST_PS_BUFFERING(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING]) && \
	 test_bit(IEEE80211_HW_HOST_BROADCAST_PS_BUFFERING, flags))
#define HWFLAGS_DEFSTATE_HOST_BROADCAST_PS_BUFFERING 0
#endif /* CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SIGNAL_UNSPEC_ON) &&	\
     defined(CONFIG_MAC80211_HW_SIGNAL_UNSPEC_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SIGNAL_UNSPEC_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SIGNAL_UNSPEC_OFF))
#define HWFLAGS_CHECK_SIGNAL_UNSPEC(flags) \
	test_bit(IEEE80211_HW_SIGNAL_UNSPEC, flags)
#define HWFLAGS_DEFSTATE_SIGNAL_UNSPEC -1
#elif defined(CONFIG_MAC80211_HW_SIGNAL_UNSPEC_ON)
#define HWFLAGS_CHECK_SIGNAL_UNSPEC(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SIGNAL_UNSPEC]) || \
	 test_bit(IEEE80211_HW_SIGNAL_UNSPEC, flags))
#define HWFLAGS_DEFSTATE_SIGNAL_UNSPEC 1
#else /* CONFIG_MAC80211_HW_SIGNAL_UNSPEC_OFF */
#define HWFLAGS_CHECK_SIGNAL_UNSPEC(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SIGNAL_UNSPEC]) && \
	 test_bit(IEEE80211_HW_SIGNAL_UNSPEC, flags))
#define HWFLAGS_DEFSTATE_SIGNAL_UNSPEC 0
#endif /* CONFIG_MAC80211_HW_SIGNAL_UNSPEC_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SIGNAL_DBM_ON) &&	\
     defined(CONFIG_MAC80211_HW_SIGNAL_DBM_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SIGNAL_DBM_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SIGNAL_DBM_OFF))
#define HWFLAGS_CHECK_SIGNAL_DBM(flags) \
	test_bit(IEEE80211_HW_SIGNAL_DBM, flags)
#define HWFLAGS_DEFSTATE_SIGNAL_DBM -1
#elif defined(CONFIG_MAC80211_HW_SIGNAL_DBM_ON)
#define HWFLAGS_CHECK_SIGNAL_DBM(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SIGNAL_DBM]) || \
	 test_bit(IEEE80211_HW_SIGNAL_DBM, flags))
#define HWFLAGS_DEFSTATE_SIGNAL_DBM 1
#else /* CONFIG_MAC80211_HW_SIGNAL_DBM_OFF */
#define HWFLAGS_CHECK_SIGNAL_DBM(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SIGNAL_DBM]) && \
	 test_bit(IEEE80211_HW_SIGNAL_DBM, flags))
#define HWFLAGS_DEFSTATE_SIGNAL_DBM 0
#endif /* CONFIG_MAC80211_HW_SIGNAL_DBM_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_ON) &&	\
     defined(CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_ON) &&	\
     !defined(CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_OFF))
#define HWFLAGS_CHECK_NEED_DTIM_BEFORE_ASSOC(flags) \
	test_bit(IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC, flags)
#define HWFLAGS_DEFSTATE_NEED_DTIM_BEFORE_ASSOC -1
#elif defined(CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_ON)
#define HWFLAGS_CHECK_NEED_DTIM_BEFORE_ASSOC(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC]) || \
	 test_bit(IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC, flags))
#define HWFLAGS_DEFSTATE_NEED_DTIM_BEFORE_ASSOC 1
#else /* CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_OFF */
#define HWFLAGS_CHECK_NEED_DTIM_BEFORE_ASSOC(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC]) && \
	 test_bit(IEEE80211_HW_NEED_DTIM_BEFORE_ASSOC, flags))
#define HWFLAGS_DEFSTATE_NEED_DTIM_BEFORE_ASSOC 0
#endif /* CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SPECTRUM_MGMT_ON) &&	\
     defined(CONFIG_MAC80211_HW_SPECTRUM_MGMT_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SPECTRUM_MGMT_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SPECTRUM_MGMT_OFF))
#define HWFLAGS_CHECK_SPECTRUM_MGMT(flags) \
	test_bit(IEEE80211_HW_SPECTRUM_MGMT, flags)
#define HWFLAGS_DEFSTATE_SPECTRUM_MGMT -1
#elif defined(CONFIG_MAC80211_HW_SPECTRUM_MGMT_ON)
#define HWFLAGS_CHECK_SPECTRUM_MGMT(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SPECTRUM_MGMT]) || \
	 test_bit(IEEE80211_HW_SPECTRUM_MGMT, flags))
#define HWFLAGS_DEFSTATE_SPECTRUM_MGMT 1
#else /* CONFIG_MAC80211_HW_SPECTRUM_MGMT_OFF */
#define HWFLAGS_CHECK_SPECTRUM_MGMT(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SPECTRUM_MGMT]) && \
	 test_bit(IEEE80211_HW_SPECTRUM_MGMT, flags))
#define HWFLAGS_DEFSTATE_SPECTRUM_MGMT 0
#endif /* CONFIG_MAC80211_HW_SPECTRUM_MGMT_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_AMPDU_AGGREGATION_ON) &&	\
     defined(CONFIG_MAC80211_HW_AMPDU_AGGREGATION_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_AMPDU_AGGREGATION_ON) &&	\
     !defined(CONFIG_MAC80211_HW_AMPDU_AGGREGATION_OFF))
#define HWFLAGS_CHECK_AMPDU_AGGREGATION(flags) \
	test_bit(IEEE80211_HW_AMPDU_AGGREGATION, flags)
#define HWFLAGS_DEFSTATE_AMPDU_AGGREGATION -1
#elif defined(CONFIG_MAC80211_HW_AMPDU_AGGREGATION_ON)
#define HWFLAGS_CHECK_AMPDU_AGGREGATION(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_AMPDU_AGGREGATION]) || \
	 test_bit(IEEE80211_HW_AMPDU_AGGREGATION, flags))
#define HWFLAGS_DEFSTATE_AMPDU_AGGREGATION 1
#else /* CONFIG_MAC80211_HW_AMPDU_AGGREGATION_OFF */
#define HWFLAGS_CHECK_AMPDU_AGGREGATION(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_AMPDU_AGGREGATION]) && \
	 test_bit(IEEE80211_HW_AMPDU_AGGREGATION, flags))
#define HWFLAGS_DEFSTATE_AMPDU_AGGREGATION 0
#endif /* CONFIG_MAC80211_HW_AMPDU_AGGREGATION_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORTS_PS_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORTS_PS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORTS_PS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORTS_PS_OFF))
#define HWFLAGS_CHECK_SUPPORTS_PS(flags) \
	test_bit(IEEE80211_HW_SUPPORTS_PS, flags)
#define HWFLAGS_DEFSTATE_SUPPORTS_PS -1
#elif defined(CONFIG_MAC80211_HW_SUPPORTS_PS_ON)
#define HWFLAGS_CHECK_SUPPORTS_PS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_PS]) || \
	 test_bit(IEEE80211_HW_SUPPORTS_PS, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_PS 1
#else /* CONFIG_MAC80211_HW_SUPPORTS_PS_OFF */
#define HWFLAGS_CHECK_SUPPORTS_PS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_PS]) && \
	 test_bit(IEEE80211_HW_SUPPORTS_PS, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_PS 0
#endif /* CONFIG_MAC80211_HW_SUPPORTS_PS_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_ON) &&	\
     defined(CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_ON) &&	\
     !defined(CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_OFF))
#define HWFLAGS_CHECK_PS_NULLFUNC_STACK(flags) \
	test_bit(IEEE80211_HW_PS_NULLFUNC_STACK, flags)
#define HWFLAGS_DEFSTATE_PS_NULLFUNC_STACK -1
#elif defined(CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_ON)
#define HWFLAGS_CHECK_PS_NULLFUNC_STACK(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_PS_NULLFUNC_STACK]) || \
	 test_bit(IEEE80211_HW_PS_NULLFUNC_STACK, flags))
#define HWFLAGS_DEFSTATE_PS_NULLFUNC_STACK 1
#else /* CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_OFF */
#define HWFLAGS_CHECK_PS_NULLFUNC_STACK(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_PS_NULLFUNC_STACK]) && \
	 test_bit(IEEE80211_HW_PS_NULLFUNC_STACK, flags))
#define HWFLAGS_DEFSTATE_PS_NULLFUNC_STACK 0
#endif /* CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_OFF))
#define HWFLAGS_CHECK_SUPPORTS_DYNAMIC_PS(flags) \
	test_bit(IEEE80211_HW_SUPPORTS_DYNAMIC_PS, flags)
#define HWFLAGS_DEFSTATE_SUPPORTS_DYNAMIC_PS -1
#elif defined(CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_ON)
#define HWFLAGS_CHECK_SUPPORTS_DYNAMIC_PS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_DYNAMIC_PS]) || \
	 test_bit(IEEE80211_HW_SUPPORTS_DYNAMIC_PS, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_DYNAMIC_PS 1
#else /* CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_OFF */
#define HWFLAGS_CHECK_SUPPORTS_DYNAMIC_PS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_DYNAMIC_PS]) && \
	 test_bit(IEEE80211_HW_SUPPORTS_DYNAMIC_PS, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_DYNAMIC_PS 0
#endif /* CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_MFP_CAPABLE_ON) &&	\
     defined(CONFIG_MAC80211_HW_MFP_CAPABLE_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_MFP_CAPABLE_ON) &&	\
     !defined(CONFIG_MAC80211_HW_MFP_CAPABLE_OFF))
#define HWFLAGS_CHECK_MFP_CAPABLE(flags) \
	test_bit(IEEE80211_HW_MFP_CAPABLE, flags)
#define HWFLAGS_DEFSTATE_MFP_CAPABLE -1
#elif defined(CONFIG_MAC80211_HW_MFP_CAPABLE_ON)
#define HWFLAGS_CHECK_MFP_CAPABLE(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_MFP_CAPABLE]) || \
	 test_bit(IEEE80211_HW_MFP_CAPABLE, flags))
#define HWFLAGS_DEFSTATE_MFP_CAPABLE 1
#else /* CONFIG_MAC80211_HW_MFP_CAPABLE_OFF */
#define HWFLAGS_CHECK_MFP_CAPABLE(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_MFP_CAPABLE]) && \
	 test_bit(IEEE80211_HW_MFP_CAPABLE, flags))
#define HWFLAGS_DEFSTATE_MFP_CAPABLE 0
#endif /* CONFIG_MAC80211_HW_MFP_CAPABLE_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_WANT_MONITOR_VIF_ON) &&	\
     defined(CONFIG_MAC80211_HW_WANT_MONITOR_VIF_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_WANT_MONITOR_VIF_ON) &&	\
     !defined(CONFIG_MAC80211_HW_WANT_MONITOR_VIF_OFF))
#define HWFLAGS_CHECK_WANT_MONITOR_VIF(flags) \
	test_bit(IEEE80211_HW_WANT_MONITOR_VIF, flags)
#define HWFLAGS_DEFSTATE_WANT_MONITOR_VIF -1
#elif defined(CONFIG_MAC80211_HW_WANT_MONITOR_VIF_ON)
#define HWFLAGS_CHECK_WANT_MONITOR_VIF(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_WANT_MONITOR_VIF]) || \
	 test_bit(IEEE80211_HW_WANT_MONITOR_VIF, flags))
#define HWFLAGS_DEFSTATE_WANT_MONITOR_VIF 1
#else /* CONFIG_MAC80211_HW_WANT_MONITOR_VIF_OFF */
#define HWFLAGS_CHECK_WANT_MONITOR_VIF(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_WANT_MONITOR_VIF]) && \
	 test_bit(IEEE80211_HW_WANT_MONITOR_VIF, flags))
#define HWFLAGS_DEFSTATE_WANT_MONITOR_VIF 0
#endif /* CONFIG_MAC80211_HW_WANT_MONITOR_VIF_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_NO_AUTO_VIF_ON) &&	\
     defined(CONFIG_MAC80211_HW_NO_AUTO_VIF_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_NO_AUTO_VIF_ON) &&	\
     !defined(CONFIG_MAC80211_HW_NO_AUTO_VIF_OFF))
#define HWFLAGS_CHECK_NO_AUTO_VIF(flags) \
	test_bit(IEEE80211_HW_NO_AUTO_VIF, flags)
#define HWFLAGS_DEFSTATE_NO_AUTO_VIF -1
#elif defined(CONFIG_MAC80211_HW_NO_AUTO_VIF_ON)
#define HWFLAGS_CHECK_NO_AUTO_VIF(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_NO_AUTO_VIF]) || \
	 test_bit(IEEE80211_HW_NO_AUTO_VIF, flags))
#define HWFLAGS_DEFSTATE_NO_AUTO_VIF 1
#else /* CONFIG_MAC80211_HW_NO_AUTO_VIF_OFF */
#define HWFLAGS_CHECK_NO_AUTO_VIF(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_NO_AUTO_VIF]) && \
	 test_bit(IEEE80211_HW_NO_AUTO_VIF, flags))
#define HWFLAGS_DEFSTATE_NO_AUTO_VIF 0
#endif /* CONFIG_MAC80211_HW_NO_AUTO_VIF_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_ON) &&	\
     defined(CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_OFF))
#define HWFLAGS_CHECK_SW_CRYPTO_CONTROL(flags) \
	test_bit(IEEE80211_HW_SW_CRYPTO_CONTROL, flags)
#define HWFLAGS_DEFSTATE_SW_CRYPTO_CONTROL -1
#elif defined(CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_ON)
#define HWFLAGS_CHECK_SW_CRYPTO_CONTROL(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SW_CRYPTO_CONTROL]) || \
	 test_bit(IEEE80211_HW_SW_CRYPTO_CONTROL, flags))
#define HWFLAGS_DEFSTATE_SW_CRYPTO_CONTROL 1
#else /* CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_OFF */
#define HWFLAGS_CHECK_SW_CRYPTO_CONTROL(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SW_CRYPTO_CONTROL]) && \
	 test_bit(IEEE80211_HW_SW_CRYPTO_CONTROL, flags))
#define HWFLAGS_DEFSTATE_SW_CRYPTO_CONTROL 0
#endif /* CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_OFF))
#define HWFLAGS_CHECK_SUPPORT_FAST_XMIT(flags) \
	test_bit(IEEE80211_HW_SUPPORT_FAST_XMIT, flags)
#define HWFLAGS_DEFSTATE_SUPPORT_FAST_XMIT -1
#elif defined(CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_ON)
#define HWFLAGS_CHECK_SUPPORT_FAST_XMIT(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORT_FAST_XMIT]) || \
	 test_bit(IEEE80211_HW_SUPPORT_FAST_XMIT, flags))
#define HWFLAGS_DEFSTATE_SUPPORT_FAST_XMIT 1
#else /* CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_OFF */
#define HWFLAGS_CHECK_SUPPORT_FAST_XMIT(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORT_FAST_XMIT]) && \
	 test_bit(IEEE80211_HW_SUPPORT_FAST_XMIT, flags))
#define HWFLAGS_DEFSTATE_SUPPORT_FAST_XMIT 0
#endif /* CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_ON) &&	\
     defined(CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_OFF))
#define HWFLAGS_CHECK_REPORTS_TX_ACK_STATUS(flags) \
	test_bit(IEEE80211_HW_REPORTS_TX_ACK_STATUS, flags)
#define HWFLAGS_DEFSTATE_REPORTS_TX_ACK_STATUS -1
#elif defined(CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_ON)
#define HWFLAGS_CHECK_REPORTS_TX_ACK_STATUS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_REPORTS_TX_ACK_STATUS]) || \
	 test_bit(IEEE80211_HW_REPORTS_TX_ACK_STATUS, flags))
#define HWFLAGS_DEFSTATE_REPORTS_TX_ACK_STATUS 1
#else /* CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_OFF */
#define HWFLAGS_CHECK_REPORTS_TX_ACK_STATUS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_REPORTS_TX_ACK_STATUS]) && \
	 test_bit(IEEE80211_HW_REPORTS_TX_ACK_STATUS, flags))
#define HWFLAGS_DEFSTATE_REPORTS_TX_ACK_STATUS 0
#endif /* CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_CONNECTION_MONITOR_ON) &&	\
     defined(CONFIG_MAC80211_HW_CONNECTION_MONITOR_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_CONNECTION_MONITOR_ON) &&	\
     !defined(CONFIG_MAC80211_HW_CONNECTION_MONITOR_OFF))
#define HWFLAGS_CHECK_CONNECTION_MONITOR(flags) \
	test_bit(IEEE80211_HW_CONNECTION_MONITOR, flags)
#define HWFLAGS_DEFSTATE_CONNECTION_MONITOR -1
#elif defined(CONFIG_MAC80211_HW_CONNECTION_MONITOR_ON)
#define HWFLAGS_CHECK_CONNECTION_MONITOR(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_CONNECTION_MONITOR]) || \
	 test_bit(IEEE80211_HW_CONNECTION_MONITOR, flags))
#define HWFLAGS_DEFSTATE_CONNECTION_MONITOR 1
#else /* CONFIG_MAC80211_HW_CONNECTION_MONITOR_OFF */
#define HWFLAGS_CHECK_CONNECTION_MONITOR(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_CONNECTION_MONITOR]) && \
	 test_bit(IEEE80211_HW_CONNECTION_MONITOR, flags))
#define HWFLAGS_DEFSTATE_CONNECTION_MONITOR 0
#endif /* CONFIG_MAC80211_HW_CONNECTION_MONITOR_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_QUEUE_CONTROL_ON) &&	\
     defined(CONFIG_MAC80211_HW_QUEUE_CONTROL_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_QUEUE_CONTROL_ON) &&	\
     !defined(CONFIG_MAC80211_HW_QUEUE_CONTROL_OFF))
#define HWFLAGS_CHECK_QUEUE_CONTROL(flags) \
	test_bit(IEEE80211_HW_QUEUE_CONTROL, flags)
#define HWFLAGS_DEFSTATE_QUEUE_CONTROL -1
#elif defined(CONFIG_MAC80211_HW_QUEUE_CONTROL_ON)
#define HWFLAGS_CHECK_QUEUE_CONTROL(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_QUEUE_CONTROL]) || \
	 test_bit(IEEE80211_HW_QUEUE_CONTROL, flags))
#define HWFLAGS_DEFSTATE_QUEUE_CONTROL 1
#else /* CONFIG_MAC80211_HW_QUEUE_CONTROL_OFF */
#define HWFLAGS_CHECK_QUEUE_CONTROL(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_QUEUE_CONTROL]) && \
	 test_bit(IEEE80211_HW_QUEUE_CONTROL, flags))
#define HWFLAGS_DEFSTATE_QUEUE_CONTROL 0
#endif /* CONFIG_MAC80211_HW_QUEUE_CONTROL_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_OFF))
#define HWFLAGS_CHECK_SUPPORTS_PER_STA_GTK(flags) \
	test_bit(IEEE80211_HW_SUPPORTS_PER_STA_GTK, flags)
#define HWFLAGS_DEFSTATE_SUPPORTS_PER_STA_GTK -1
#elif defined(CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_ON)
#define HWFLAGS_CHECK_SUPPORTS_PER_STA_GTK(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_PER_STA_GTK]) || \
	 test_bit(IEEE80211_HW_SUPPORTS_PER_STA_GTK, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_PER_STA_GTK 1
#else /* CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_OFF */
#define HWFLAGS_CHECK_SUPPORTS_PER_STA_GTK(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_PER_STA_GTK]) && \
	 test_bit(IEEE80211_HW_SUPPORTS_PER_STA_GTK, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_PER_STA_GTK 0
#endif /* CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_AP_LINK_PS_ON) &&	\
     defined(CONFIG_MAC80211_HW_AP_LINK_PS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_AP_LINK_PS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_AP_LINK_PS_OFF))
#define HWFLAGS_CHECK_AP_LINK_PS(flags) \
	test_bit(IEEE80211_HW_AP_LINK_PS, flags)
#define HWFLAGS_DEFSTATE_AP_LINK_PS -1
#elif defined(CONFIG_MAC80211_HW_AP_LINK_PS_ON)
#define HWFLAGS_CHECK_AP_LINK_PS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_AP_LINK_PS]) || \
	 test_bit(IEEE80211_HW_AP_LINK_PS, flags))
#define HWFLAGS_DEFSTATE_AP_LINK_PS 1
#else /* CONFIG_MAC80211_HW_AP_LINK_PS_OFF */
#define HWFLAGS_CHECK_AP_LINK_PS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_AP_LINK_PS]) && \
	 test_bit(IEEE80211_HW_AP_LINK_PS, flags))
#define HWFLAGS_DEFSTATE_AP_LINK_PS 0
#endif /* CONFIG_MAC80211_HW_AP_LINK_PS_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_ON) &&	\
     defined(CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_ON) &&	\
     !defined(CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_OFF))
#define HWFLAGS_CHECK_TX_AMPDU_SETUP_IN_HW(flags) \
	test_bit(IEEE80211_HW_TX_AMPDU_SETUP_IN_HW, flags)
#define HWFLAGS_DEFSTATE_TX_AMPDU_SETUP_IN_HW -1
#elif defined(CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_ON)
#define HWFLAGS_CHECK_TX_AMPDU_SETUP_IN_HW(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_TX_AMPDU_SETUP_IN_HW]) || \
	 test_bit(IEEE80211_HW_TX_AMPDU_SETUP_IN_HW, flags))
#define HWFLAGS_DEFSTATE_TX_AMPDU_SETUP_IN_HW 1
#else /* CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_OFF */
#define HWFLAGS_CHECK_TX_AMPDU_SETUP_IN_HW(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_TX_AMPDU_SETUP_IN_HW]) && \
	 test_bit(IEEE80211_HW_TX_AMPDU_SETUP_IN_HW, flags))
#define HWFLAGS_DEFSTATE_TX_AMPDU_SETUP_IN_HW 0
#endif /* CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_OFF))
#define HWFLAGS_CHECK_SUPPORTS_RC_TABLE(flags) \
	test_bit(IEEE80211_HW_SUPPORTS_RC_TABLE, flags)
#define HWFLAGS_DEFSTATE_SUPPORTS_RC_TABLE -1
#elif defined(CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_ON)
#define HWFLAGS_CHECK_SUPPORTS_RC_TABLE(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_RC_TABLE]) || \
	 test_bit(IEEE80211_HW_SUPPORTS_RC_TABLE, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_RC_TABLE 1
#else /* CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_OFF */
#define HWFLAGS_CHECK_SUPPORTS_RC_TABLE(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_RC_TABLE]) && \
	 test_bit(IEEE80211_HW_SUPPORTS_RC_TABLE, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_RC_TABLE 0
#endif /* CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_ON) &&	\
     defined(CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_ON) &&	\
     !defined(CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_OFF))
#define HWFLAGS_CHECK_P2P_DEV_ADDR_FOR_INTF(flags) \
	test_bit(IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF, flags)
#define HWFLAGS_DEFSTATE_P2P_DEV_ADDR_FOR_INTF -1
#elif defined(CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_ON)
#define HWFLAGS_CHECK_P2P_DEV_ADDR_FOR_INTF(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF]) || \
	 test_bit(IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF, flags))
#define HWFLAGS_DEFSTATE_P2P_DEV_ADDR_FOR_INTF 1
#else /* CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_OFF */
#define HWFLAGS_CHECK_P2P_DEV_ADDR_FOR_INTF(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF]) && \
	 test_bit(IEEE80211_HW_P2P_DEV_ADDR_FOR_INTF, flags))
#define HWFLAGS_DEFSTATE_P2P_DEV_ADDR_FOR_INTF 0
#endif /* CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_ON) &&	\
     defined(CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_ON) &&	\
     !defined(CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_OFF))
#define HWFLAGS_CHECK_TIMING_BEACON_ONLY(flags) \
	test_bit(IEEE80211_HW_TIMING_BEACON_ONLY, flags)
#define HWFLAGS_DEFSTATE_TIMING_BEACON_ONLY -1
#elif defined(CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_ON)
#define HWFLAGS_CHECK_TIMING_BEACON_ONLY(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_TIMING_BEACON_ONLY]) || \
	 test_bit(IEEE80211_HW_TIMING_BEACON_ONLY, flags))
#define HWFLAGS_DEFSTATE_TIMING_BEACON_ONLY 1
#else /* CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_OFF */
#define HWFLAGS_CHECK_TIMING_BEACON_ONLY(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_TIMING_BEACON_ONLY]) && \
	 test_bit(IEEE80211_HW_TIMING_BEACON_ONLY, flags))
#define HWFLAGS_DEFSTATE_TIMING_BEACON_ONLY 0
#endif /* CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_OFF))
#define HWFLAGS_CHECK_SUPPORTS_HT_CCK_RATES(flags) \
	test_bit(IEEE80211_HW_SUPPORTS_HT_CCK_RATES, flags)
#define HWFLAGS_DEFSTATE_SUPPORTS_HT_CCK_RATES -1
#elif defined(CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_ON)
#define HWFLAGS_CHECK_SUPPORTS_HT_CCK_RATES(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_HT_CCK_RATES]) || \
	 test_bit(IEEE80211_HW_SUPPORTS_HT_CCK_RATES, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_HT_CCK_RATES 1
#else /* CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_OFF */
#define HWFLAGS_CHECK_SUPPORTS_HT_CCK_RATES(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_HT_CCK_RATES]) && \
	 test_bit(IEEE80211_HW_SUPPORTS_HT_CCK_RATES, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_HT_CCK_RATES 0
#endif /* CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_CHANCTX_STA_CSA_ON) &&	\
     defined(CONFIG_MAC80211_HW_CHANCTX_STA_CSA_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_CHANCTX_STA_CSA_ON) &&	\
     !defined(CONFIG_MAC80211_HW_CHANCTX_STA_CSA_OFF))
#define HWFLAGS_CHECK_CHANCTX_STA_CSA(flags) \
	test_bit(IEEE80211_HW_CHANCTX_STA_CSA, flags)
#define HWFLAGS_DEFSTATE_CHANCTX_STA_CSA -1
#elif defined(CONFIG_MAC80211_HW_CHANCTX_STA_CSA_ON)
#define HWFLAGS_CHECK_CHANCTX_STA_CSA(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_CHANCTX_STA_CSA]) || \
	 test_bit(IEEE80211_HW_CHANCTX_STA_CSA, flags))
#define HWFLAGS_DEFSTATE_CHANCTX_STA_CSA 1
#else /* CONFIG_MAC80211_HW_CHANCTX_STA_CSA_OFF */
#define HWFLAGS_CHECK_CHANCTX_STA_CSA(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_CHANCTX_STA_CSA]) && \
	 test_bit(IEEE80211_HW_CHANCTX_STA_CSA, flags))
#define HWFLAGS_DEFSTATE_CHANCTX_STA_CSA 0
#endif /* CONFIG_MAC80211_HW_CHANCTX_STA_CSA_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_OFF))
#define HWFLAGS_CHECK_SUPPORTS_CLONED_SKBS(flags) \
	test_bit(IEEE80211_HW_SUPPORTS_CLONED_SKBS, flags)
#define HWFLAGS_DEFSTATE_SUPPORTS_CLONED_SKBS -1
#elif defined(CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_ON)
#define HWFLAGS_CHECK_SUPPORTS_CLONED_SKBS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_CLONED_SKBS]) || \
	 test_bit(IEEE80211_HW_SUPPORTS_CLONED_SKBS, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_CLONED_SKBS 1
#else /* CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_OFF */
#define HWFLAGS_CHECK_SUPPORTS_CLONED_SKBS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_CLONED_SKBS]) && \
	 test_bit(IEEE80211_HW_SUPPORTS_CLONED_SKBS, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_CLONED_SKBS 0
#endif /* CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_ON) &&	\
     defined(CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_OFF))
#define HWFLAGS_CHECK_SINGLE_SCAN_ON_ALL_BANDS(flags) \
	test_bit(IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS, flags)
#define HWFLAGS_DEFSTATE_SINGLE_SCAN_ON_ALL_BANDS -1
#elif defined(CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_ON)
#define HWFLAGS_CHECK_SINGLE_SCAN_ON_ALL_BANDS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS]) || \
	 test_bit(IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS, flags))
#define HWFLAGS_DEFSTATE_SINGLE_SCAN_ON_ALL_BANDS 1
#else /* CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_OFF */
#define HWFLAGS_CHECK_SINGLE_SCAN_ON_ALL_BANDS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS]) && \
	 test_bit(IEEE80211_HW_SINGLE_SCAN_ON_ALL_BANDS, flags))
#define HWFLAGS_DEFSTATE_SINGLE_SCAN_ON_ALL_BANDS 0
#endif /* CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_TDLS_WIDER_BW_ON) &&	\
     defined(CONFIG_MAC80211_HW_TDLS_WIDER_BW_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_TDLS_WIDER_BW_ON) &&	\
     !defined(CONFIG_MAC80211_HW_TDLS_WIDER_BW_OFF))
#define HWFLAGS_CHECK_TDLS_WIDER_BW(flags) \
	test_bit(IEEE80211_HW_TDLS_WIDER_BW, flags)
#define HWFLAGS_DEFSTATE_TDLS_WIDER_BW -1
#elif defined(CONFIG_MAC80211_HW_TDLS_WIDER_BW_ON)
#define HWFLAGS_CHECK_TDLS_WIDER_BW(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_TDLS_WIDER_BW]) || \
	 test_bit(IEEE80211_HW_TDLS_WIDER_BW, flags))
#define HWFLAGS_DEFSTATE_TDLS_WIDER_BW 1
#else /* CONFIG_MAC80211_HW_TDLS_WIDER_BW_OFF */
#define HWFLAGS_CHECK_TDLS_WIDER_BW(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_TDLS_WIDER_BW]) && \
	 test_bit(IEEE80211_HW_TDLS_WIDER_BW, flags))
#define HWFLAGS_DEFSTATE_TDLS_WIDER_BW 0
#endif /* CONFIG_MAC80211_HW_TDLS_WIDER_BW_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_ON) &&	\
     defined(CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_ON) &&	\
     !defined(CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_OFF))
#define HWFLAGS_CHECK_SUPPORTS_AMSDU_IN_AMPDU(flags) \
	test_bit(IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU, flags)
#define HWFLAGS_DEFSTATE_SUPPORTS_AMSDU_IN_AMPDU -1
#elif defined(CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_ON)
#define HWFLAGS_CHECK_SUPPORTS_AMSDU_IN_AMPDU(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU]) || \
	 test_bit(IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_AMSDU_IN_AMPDU 1
#else /* CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_OFF */
#define HWFLAGS_CHECK_SUPPORTS_AMSDU_IN_AMPDU(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU]) && \
	 test_bit(IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU, flags))
#define HWFLAGS_DEFSTATE_SUPPORTS_AMSDU_IN_AMPDU 0
#endif /* CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_ON/OFF */

#if (defined(CONFIG_MAC80211_HW_BEACON_TX_STATUS_ON) &&	\
     defined(CONFIG_MAC80211_HW_BEACON_TX_STATUS_OFF)) ||	\
    (!defined(CONFIG_MAC80211_HW_BEACON_TX_STATUS_ON) &&	\
     !defined(CONFIG_MAC80211_HW_BEACON_TX_STATUS_OFF))
#define HWFLAGS_CHECK_BEACON_TX_STATUS(flags) \
	test_bit(IEEE80211_HW_BEACON_TX_STATUS, flags)
#define HWFLAGS_DEFSTATE_BEACON_TX_STATUS -1
#elif defined(CONFIG_MAC80211_HW_BEACON_TX_STATUS_ON)
#define HWFLAGS_CHECK_BEACON_TX_STATUS(flags) \
	(!static_key_false(&hwflags_keys[IEEE80211_HW_BEACON_TX_STATUS]) || \
	 test_bit(IEEE80211_HW_BEACON_TX_STATUS, flags))
#define HWFLAGS_DEFSTATE_BEACON_TX_STATUS 1
#else /* CONFIG_MAC80211_HW_BEACON_TX_STATUS_OFF */
#define HWFLAGS_CHECK_BEACON_TX_STATUS(flags) \
	(static_key_false(&hwflags_keys[IEEE80211_HW_BEACON_TX_STATUS]) && \
	 test_bit(IEEE80211_HW_BEACON_TX_STATUS, flags))
#define HWFLAGS_DEFSTATE_BEACON_TX_STATUS 0
#endif /* CONFIG_MAC80211_HW_BEACON_TX_STATUS_ON/OFF */


#define ieee80211_local_check(local, flg)		\
	HWFLAGS_CHECK_##flg((local)->hw.flags)

void ieee80211_hwflags_sync_add(unsigned long *flags);
void ieee80211_hwflags_sync_del(unsigned long *flags);
#else /* CONFIG_JUMP_LABEL */
#define ieee80211_local_check(local, flg)	\
	test_bit(IEEE80211_HW_##flg, local->hw.flags)

static inline void ieee80211_hwflags_sync_add(unsigned long *flags) {}
static inline void ieee80211_hwflags_sync_del(unsigned long *flags) {}
#endif /* CONFIG_JUMP_LABEL */

#endif /* __mac80211_hwflags_h */
