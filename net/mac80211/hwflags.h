/*
 * Copyright 2015	Intel Deutschland GmbH
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __mac80211_hwflags_h
#define __mac80211_hwflags_h
#include <linux/jump_label.h>
#include <net/mac80211.h>

extern struct static_key_false hwflags_keys[NUM_IEEE80211_HW_FLAGS];

#ifdef CONFIG_JUMP_LABEL
#define HWFLAGS_DEFSTATE(_name, _on, _off)	\
	HWFLAGS_DEFSTATE_##_name = -1 + ((_on) ^ (_off)) * (1 + _on)

enum hwflags_defstates {
HWFLAGS_DEFSTATE(HAS_RATE_CONTROL,
		 IS_ENABLED(CONFIG_MAC80211_HW_HAS_RATE_CONTROL_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_HAS_RATE_CONTROL_OFF)),
HWFLAGS_DEFSTATE(RX_INCLUDES_FCS,
		 IS_ENABLED(CONFIG_MAC80211_HW_RX_INCLUDES_FCS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_RX_INCLUDES_FCS_OFF)),
HWFLAGS_DEFSTATE(HOST_BROADCAST_PS_BUFFERING,
		 IS_ENABLED(CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_HOST_BROADCAST_PS_BUFFERING_OFF)),
HWFLAGS_DEFSTATE(SIGNAL_UNSPEC,
		 IS_ENABLED(CONFIG_MAC80211_HW_SIGNAL_UNSPEC_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SIGNAL_UNSPEC_OFF)),
HWFLAGS_DEFSTATE(SIGNAL_DBM,
		 IS_ENABLED(CONFIG_MAC80211_HW_SIGNAL_DBM_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SIGNAL_DBM_OFF)),
HWFLAGS_DEFSTATE(NEED_DTIM_BEFORE_ASSOC,
		 IS_ENABLED(CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_NEED_DTIM_BEFORE_ASSOC_OFF)),
HWFLAGS_DEFSTATE(SPECTRUM_MGMT,
		 IS_ENABLED(CONFIG_MAC80211_HW_SPECTRUM_MGMT_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SPECTRUM_MGMT_OFF)),
HWFLAGS_DEFSTATE(AMPDU_AGGREGATION,
		 IS_ENABLED(CONFIG_MAC80211_HW_AMPDU_AGGREGATION_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_AMPDU_AGGREGATION_OFF)),
HWFLAGS_DEFSTATE(SUPPORTS_PS,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_PS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_PS_OFF)),
HWFLAGS_DEFSTATE(PS_NULLFUNC_STACK,
		 IS_ENABLED(CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_PS_NULLFUNC_STACK_OFF)),
HWFLAGS_DEFSTATE(SUPPORTS_DYNAMIC_PS,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_DYNAMIC_PS_OFF)),
HWFLAGS_DEFSTATE(MFP_CAPABLE,
		 IS_ENABLED(CONFIG_MAC80211_HW_MFP_CAPABLE_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_MFP_CAPABLE_OFF)),
HWFLAGS_DEFSTATE(WANT_MONITOR_VIF,
		 IS_ENABLED(CONFIG_MAC80211_HW_WANT_MONITOR_VIF_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_WANT_MONITOR_VIF_OFF)),
HWFLAGS_DEFSTATE(NO_AUTO_VIF,
		 IS_ENABLED(CONFIG_MAC80211_HW_NO_AUTO_VIF_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_NO_AUTO_VIF_OFF)),
HWFLAGS_DEFSTATE(SW_CRYPTO_CONTROL,
		 IS_ENABLED(CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SW_CRYPTO_CONTROL_OFF)),
HWFLAGS_DEFSTATE(SUPPORT_FAST_XMIT,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORT_FAST_XMIT_OFF)),
HWFLAGS_DEFSTATE(REPORTS_TX_ACK_STATUS,
		 IS_ENABLED(CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_REPORTS_TX_ACK_STATUS_OFF)),
HWFLAGS_DEFSTATE(CONNECTION_MONITOR,
		 IS_ENABLED(CONFIG_MAC80211_HW_CONNECTION_MONITOR_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_CONNECTION_MONITOR_OFF)),
HWFLAGS_DEFSTATE(QUEUE_CONTROL,
		 IS_ENABLED(CONFIG_MAC80211_HW_QUEUE_CONTROL_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_QUEUE_CONTROL_OFF)),
HWFLAGS_DEFSTATE(SUPPORTS_PER_STA_GTK,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_PER_STA_GTK_OFF)),
HWFLAGS_DEFSTATE(AP_LINK_PS,
		 IS_ENABLED(CONFIG_MAC80211_HW_AP_LINK_PS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_AP_LINK_PS_OFF)),
HWFLAGS_DEFSTATE(TX_AMPDU_SETUP_IN_HW,
		 IS_ENABLED(CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_TX_AMPDU_SETUP_IN_HW_OFF)),
HWFLAGS_DEFSTATE(SUPPORTS_RC_TABLE,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_RC_TABLE_OFF)),
HWFLAGS_DEFSTATE(P2P_DEV_ADDR_FOR_INTF,
		 IS_ENABLED(CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_P2P_DEV_ADDR_FOR_INTF_OFF)),
HWFLAGS_DEFSTATE(TIMING_BEACON_ONLY,
		 IS_ENABLED(CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_TIMING_BEACON_ONLY_OFF)),
HWFLAGS_DEFSTATE(SUPPORTS_HT_CCK_RATES,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_HT_CCK_RATES_OFF)),
HWFLAGS_DEFSTATE(CHANCTX_STA_CSA,
		 IS_ENABLED(CONFIG_MAC80211_HW_CHANCTX_STA_CSA_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_CHANCTX_STA_CSA_OFF)),
HWFLAGS_DEFSTATE(SUPPORTS_CLONED_SKBS,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_CLONED_SKBS_OFF)),
HWFLAGS_DEFSTATE(SINGLE_SCAN_ON_ALL_BANDS,
		 IS_ENABLED(CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SINGLE_SCAN_ON_ALL_BANDS_OFF)),
HWFLAGS_DEFSTATE(TDLS_WIDER_BW,
		 IS_ENABLED(CONFIG_MAC80211_HW_TDLS_WIDER_BW_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_TDLS_WIDER_BW_OFF)),
HWFLAGS_DEFSTATE(SUPPORTS_AMSDU_IN_AMPDU,
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_SUPPORTS_AMSDU_IN_AMPDU_OFF)),
HWFLAGS_DEFSTATE(BEACON_TX_STATUS,
		 IS_ENABLED(CONFIG_MAC80211_HW_BEACON_TX_STATUS_ON),
		 IS_ENABLED(CONFIG_MAC80211_HW_BEACON_TX_STATUS_OFF)),
};

bool _____optimisation_missing(void);

#define ieee80211_local_check(local, flg)				\
({									\
	enum ieee80211_hw_flags flag = IEEE80211_HW_##flg;		\
	bool result;							\
									\
	if (HWFLAGS_DEFSTATE_##flg == -1)				\
		result = test_bit(flag, (local)->hw.flags);		\
	else if (HWFLAGS_DEFSTATE_##flg == 1)				\
		result = (!static_branch_unlikely(&hwflags_keys[flag]) ||\
			  test_bit(flag, (local)->hw.flags));		\
	else if (HWFLAGS_DEFSTATE_##flg == 0)				\
		result = (static_branch_unlikely(&hwflags_keys[flag]) &&\
			  test_bit(flag, (local)->hw.flags));		\
	else								\
		result = _____optimisation_missing();			\
									\
	result;								\
})

void ieee80211_hwflags_sync_add(unsigned long *flags);
void ieee80211_hwflags_sync_del(unsigned long *flags);
#else /* CONFIG_JUMP_LABEL */
#define ieee80211_local_check(local, flg)	\
	test_bit(IEEE80211_HW_##flg, local->hw.flags)

static inline void ieee80211_hwflags_sync_add(unsigned long *flags) {}
static inline void ieee80211_hwflags_sync_del(unsigned long *flags) {}
#endif /* CONFIG_JUMP_LABEL */

void ieee80211_test_hwflags(void);

#endif /* __mac80211_hwflags_h */
