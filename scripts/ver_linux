#!/bin/awk -f
# Before running this script please ensure that your PATH is
# typical as you use for compilation/installation. I use
# /bin /sbin /usr/bin /usr/sbin /usr/local/bin, but it may
# differ on your system.

BEGIN {
	usage = "If some fields are empty or look unusual you may have an old version.\n"
	usage = usage "Compare to the current minimal requirements in Documentation/Changes.\n"
	print usage

	system("uname -a")
	printf("\n")

	printversion("GNU C", version("gcc -dumpversion 2>&1"))
	printversion("GNU Make", version("make --version 2>&1"))
	printversion("Binutils", version("ld -v 2>&1"))
	printversion("Util-linux", version("mount --version 2>&1"))
	printversion("Mount", version("mount --version 2>&1"))
	printversion("Module-init-tools", version("depmod -V  2>&1"))
	printversion("E2fsprogs", version("tune2fs 2>&1"))
	printversion("Jfsutils", version("fsck.jfs -V 2>&1"))
	printversion("Reiserfsprogs", version("reiserfsck -V 2>&1"))
	printversion("Reiser4fsprogs", version("fsck.reiser4 -V 2>&1"))
	printversion("Xfsprogs", version("xfs_db -V 2>&1"))
	printversion("Pcmciautils", version("pccardctl -V 2>&1"))
	printversion("Pcmcia-cs", version("cardmgr -V 2>&1"))
	printversion("Quota-tools", version("quota -V 2>&1"))
	printversion("PPP", version("pppd --version 2>&1"))
	printversion("Isdn4k-utils", version("isdnctrl 2>&1"))
	printversion("Nfs-utils", version("showmount --version 2>&1"))

	if (system("test -r /proc/self/maps") == 0) {
		while (getline <"/proc/self/maps" > 0) {
			n = split($0, procmaps, "/")
			if (/libc.*so$/ && match(procmaps[n], /[0-9]+([.]?[0-9]+)+/)) {
				ver = substr(procmaps[n], RSTART, RLENGTH)
				printversion("Linux C Library", ver)
				break
			}
		}
	}

ldd --version 2>&1 |
awk '/^ldd/{
	match($0, /[0-9]+([.]?[0-9]+)+/)
	printf("Dynamic linker (ldd)\t%s\n",
	substr($0,RSTART,RLENGTH))
}'

libcpp=`ldconfig -p 2>/dev/null |
	awk '/(libg|stdc)[+]+\.so/ {
	print $NF
	exit
	}
'`
test -r "$libcpp" &&
ls -l $libcpp |
sed '
	s!.*so\.!!
	s!^!Linux C++ Library\t!
'
ps --version 2>&1 |
awk '/version/{
	match($0, /[0-9]+([.]?[0-9]+)+/)
	printf("Procps\t\t\t%s\n",
	substr($0,RSTART,RLENGTH))
}'

ifconfig --version 2>&1 |
awk '/tools/{
	match($0, /[0-9]+([.]?[0-9]+)+/)
	printf("Net-tools\t\t%s\n",
	substr($0,RSTART,RLENGTH))
}'

loadkeys -V 2>&1 |
awk '/[0-9]+([.]?[0-9]+)+/ && !/not found$/{
	match($0, /[0-9]+([.]?[0-9]+)+/)
	$0 = substr($0,RSTART,RLENGTH)
	printf("Kbd\t\t\t%s\nConsole-tools\t\t%s\n",$0,$0)
}'

oprofiled --version 2>&1 | awk \
'(NR==1 && ($2 == "oprofile")) {print "oprofile              ", $3}'

expr --v 2>&1 |
awk '/^expr/{
	match($0, /[0-9]+([.]?[0-9]+)+/)
	printf("Sh-utils\t\t%s\n",
	substr($0,RSTART,RLENGTH))
}'

udevadm --version 2>&1 |
awk '/[0-9]+([.]?[0-9]+)+/ && !/not found$/{
	match($0, /[0-9]+([.]?[0-9]+)+/)
	printf("Udev\t\t\t%s\n",
	substr($0,RSTART,RLENGTH))
}'

iwconfig --version 2>&1 |
awk '/version/{
	match($0, /[0-9]+([.]?[0-9]+)+/)
	printf("Wireless-tools\t\t%s\n",
	substr($0,RSTART,RLENGTH))
}'

test -e /proc/modules &&
sort /proc/modules |
sed '
	s/ .*//
	H
${
	g
	s/^\n/Modules Loaded\t\t/
	y/\n/ /
	q
}
	d
'
