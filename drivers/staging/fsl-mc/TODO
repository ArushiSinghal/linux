* Add sysfs rescan attribute for fsl-mc bus, and dprc device. The rescan will
  trigger the fsl-mc bus, dprc driver to re-discover the objects under fsl-mc
  bus and dprc.X container. Hence this feature actually verifies the
  functionality of fsl-mc bus, and dprc driver, and it helps moving
  fsl-mc bus out of staging.

* Decide if multiple root fsl-mc buses will be supported per Linux instance,
  and if so add support for this. No matter fsl-mc bus support multiple root
  dprc or not, restool driver is designed to support multiple root if fsl-mc
  bus is ready some day later. If there is only one root dprc, restool driver
  works fine.

* Add at least one driver utilizing fsl-mc bus. Restool driver is a very
  small and simple driver, which interacts with fsl-mc bus, dprc driver,
  allocator driver. Restool relies on allocator driver to allocate
  dpmcp resources, enumerates fsl-mc bus to find root dprc objects of interest.
  When the user space restool program sends a request to restool driver to
  create a dp* objects in MC firmware, an interrupt will be triggered by
  MC firmware and the dprc driver's interrupt handler shall process the
  interrupt. Though small, restool driver helps verify all the functionality
  of fsl-mc bus, dprc driver, allocator driver, and MC flib API. Restool
  driver helps in moving fsl-mc bus out of staging branch.

* Add at least one device driver for a DPAA2 object (child device of the
  fsl-mc bus). Most likely candidate for this is adding DPAA2 Ethernet
  driver support, which depends on drivers for several objects: DPNI,
  DPIO, DPMAC.  Other pre-requisites include:

     * interrupt support. for meaningful driver support we need
       interrupts, and thus need message interrupt support by the bus
       driver.
          -Note: this has dependencies on generic MSI support work
           in process upstream, see [1] and [2].

     * Management Complex (MC) command serialization. locking mechanisms
       are needed by drivers to serialize commands sent to the MC, including
       from atomic context.

     * MC firmware uprev.  The MC firmware upon which the fsl-mc
       bus driver and DPAA2 object drivers are based is continuing
       to evolve, so minor updates are needed to keep in sync with binary
       interface changes to the MC.

* Cleanup

Please send any patches to Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
german.rivera@freescale.com, devel@driverdev.osuosl.org,
linux-kernel@vger.kernel.org

[1] https://lkml.org/lkml/2015/7/9/93
[2] https://lkml.org/lkml/2015/7/7/712
