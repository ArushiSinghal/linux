Common multiplexer controller bindings

A mux controller will have one, or several, consumer devices that uses the
mux controller. Thus, a mux controller can possibly control several
parallel multiplexers. If there are several consumer devices, the node for
a mux controller will have one child node for each consumer of the multiplexer
controller. If there is only one consumer of the mux controller, the mux
controller node can be the child (with node name 'mux-controller') of the
consumer node.

A mux controller provides a number of states to its consumers, and the
state space is a simple zero-based enumeration. I.e. 0-1 for a 2-way
multiplexer, 0-7 for an 8-way multiplexer, etc.

Example:

	/*
	 * One consumer of a 2-way multiplexer controller by one GPIO-line,
	 * with the multiplexer controller as a child node.
	 */
	adc-mux {
		compatible = "iio-mux";
		io-channels = <&adc 0>;
		io-channel-names = "parent";

		#address-cells = <1>;
		#size-cells = <0>;

		mux-controller {
			compatible = "mux-gpio";

			mux-gpios = <&pioA 0 GPIO_ACTIVE_HIGH>;
		};

		sync-1@0 {
			reg = <0>;
		};

		in@1 {
			reg = <1>;
		};
	};

	/*
	 * Two consumers (one for an ADC line and one for an i2c bus) of
	 * parallel 4-way multiplexers controlled by the same two GPIO-lines.
	 */
	mux {
		compatible = "mux-gpio";

		mux-gpios = <&pioA 0 GPIO_ACTIVE_HIGH>,
			    <&pioA 1 GPIO_ACTIVE_HIGH>;

		adc-mux {
			compatible = "iio-mux";
			io-channels = <&adc 0>;
			io-channel-names = "parent";

			#address-cells = <1>;
			#size-cells = <0>;

			sync-1@0 {
				reg = <0>;
			};

			in@1 {
				reg = <1>;
			};

			out@2 {
				reg = <2>;
			};

			sync-2@3 {
				reg = <3>;
			};
		};

		i2c-mux {
			compatible = "i2c-mux-simple,mux-locked";
			i2c-parent = <&i2c1>;

			#address-cells = <1>;
			#size-cells = <0>;

			i2c@0 {
				reg = <0>;
				#address-cells = <1>;
				#size-cells = <0>;

				ssd1307: oled@3c {
					/* ... */
				};
			};

			i2c@3 {
				reg = <3>;
				#address-cells = <1>;
				#size-cells = <0>;

				pca9555: pca9555@20 {
					/* ... */
				};
			};
		};
	};
