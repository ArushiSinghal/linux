Device-Tree bindings for input/gpio_keys.c keyboard driver

Required properties:
	- compatible = "gpio-keys";

Optional properties:
	- autorepeat: Boolean, Enable auto repeat feature of Linux input
	  subsystem.
	- label: String, name of the input device.

Each button (key) is represented as a sub-node of "gpio-keys":
Subnode properties:

	- gpios: OF device-tree gpio specification.
	- interrupts: the interrupt line for that input.
	- label: Descriptive name of the key.
	- linux,code: Keycode to emit.

Note that either "interrupts" or "gpios" properties can be omitted, but not
both at the same time. Specifying both properties is allowed.

Optional subnode-properties:
	- linux,input-type: Specify event type this button/key generates.
	  If not specified defaults to <1> == EV_KEY.
	- linux,input-value: If linux,input-type is EV_ABS or EV_REL then this
	  value is sent for events this button generates when pressed.
	  EV_ABS/EV_REL axis will generate an event with a value of 0 when
	  all buttons with linux,input-type == type and linux,code == axis
	  are released. This value is interpreted as a signed 32 bit value,
	  e.g. to make a button generate a value of -1 use:
	  linux,input-value = <0xffffffff>; /* -1 */
	- debounce-interval: Debouncing interval time in milliseconds.
	  If not specified defaults to 5.
	- wakeup-source: Boolean, button can wake-up the system.
			 (Legacy property supported: "gpio-key,wakeup")
	- linux,can-disable: Boolean, indicates that button is connected
	  to dedicated (not shared) interrupt which can be disabled to
	  suppress events from the button.

Example nodes:

	gpio-keys {
			compatible = "gpio-keys";
			autorepeat;

			up {
				label = "GPIO Key UP";
				linux,code = <103>;
				gpios = <&gpio1 0 1>;
			};

			down {
				label = "GPIO Key DOWN";
				linux,code = <108>;
				interrupts = <1 IRQ_TYPE_LEVEL_HIGH 7>;
			};
	...

	gpio-joystick: {
			compatible = "gpio-keys";

			pinctrl-names = "default";
			pinctrl-0 = <&my_pins>;

			up {
				gpios = <&gpio 26 1>;
				linux,input-type = <EV_ABS>;
				linux,code = <ABS_Y>;
				linux,input-value = <0xffffffff>;
			};

			down {
				gpios = <&gpio 13 1>;
				linux,input-type = <EV_ABS>;
				linux,code = <ABS_Y>;
				linux,input-value = <1>;
			};

			left {
				gpios = <&gpio 6 1>;
				linux,input-type = <EV_ABS>;
				linux,code = <ABS_X>;
				linux,input-value = <0xffffffff>;
			};

			right {
				gpios = <&gpio 5 1>;
				linux,input-type = <EV_ABS>;
				linux,code = <ABS_X>;
				linux,input-value = <0x1>;
			};

			trigger_button {
				gpios = <&gpio 12 1>;
				linux,code = <BTN_TRIGGER>;
			};
	};
	...
