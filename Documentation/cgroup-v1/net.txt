Networking cgroup
=================

The net cgroup controller keeps track of the following networking related
properties for each process group:
* bind port ranges
* listen port ranges
* dscp ranges
* udp port usage and limit

bind port ranges
----------------
This property controls which ports the processes in a cgroup are allowed
to bind to. If a process in a cgroup tries to bind a socket to a port
that is not within the range(s) permitted by the cgroup, it will receive an
EACCES error.

This property is exposed to userspace through the 'net.bind_port_ranges' file,
as ranges of ports that the processes can bind to (as described in the HOW TO
INTERACT WITH RANGES FILES section).

listen port ranges
------------------
This property controls which ports the processes in a cgroup are allowed
to listen on. If a process in a cgroup tries to listen using a socket
bound to a port that is not within the range(s) permitted by the cgroup,
it will receive an EACCES error.

This property is exposed to userspace through the 'net.listen_port_ranges' file,
as ranges of ports that the processes can listen on (as described in the HOW TO
INTERACT WITH RANGES FILES section).

dscp ranges
-----------
This property controls which dscp values the processes in a cgroup are
allowed to use. A process in a cgroup will receive an EACCES error if it
tries to do any of these things:
* set a socket's IP_TOS option to a value whose dscp field (bits 7:2) is
  outside the range
* use a socket to send a message in which the IP_TOS ancillary data is
  set to a value whose dscp field is outside the range

This property is exposed to userspace through the 'net.dscp_ranges' file, as
ranges of dscp values that the process can use (as described in the HOW TO
INTERACT WITH RANGES FILES section).

udp port usage and limit
------------------------
This property controls the limit of udp ports that can be used by the
processes in a cgroup. The controller manages udp statistics (usage, limit, etc)
for each cgroup. Every cgroup also keeps track of the udp ports acquired by its
descendants. If a process tries to acquire a port when its cgroup has
already reached its limit, it will fail with error EACCES. It will also fail if
one of the cgroup's ancestors has reached its limit. There are 5 files
exposed to userspace to configure this property:

* 'net.udp_usage': Reading this file gives the number of udp ports used by
processes in this cgroup and all its descendants.
* 'net.udp_limit': Writing this file sets the total number of udp ports
that can be used by processes in this cgroup and all
its descendants. This file can also be read.
* 'net.udp_maxusage': Reading this file gives the highest value of
net.udp_usage that has been seen for this cgroup.
* 'net.udp_failcnt': Reading this file gives the number of times a
process in this cgroup or one of its descendants has attempted to acquire a
udp port but failed because the limit of this cgroup was reached.
* 'net.udp_underflowcnt': Reading this file gives the number of times a
process in this cgroup or one of its descendants released a udp port when the
usage value of this cgroup was 0.

When a new cgroup is created, its udp limit is copied from its parent.

HOW TO INTERACT WITH RANGES FILES
---------------------------------
Some cgroup properties can be expressed as ranges of allowed integers. From
userspace, you can get or set them by accessing the cgroup file corresponding to
the property you want to interact with. To set the ranges, write a list of
comma-separated ranges to the file, where each range could be either a pair of
integers separated by a hyphen (-), or just an individual integer. For example,
say you want a cgroup to allow the integers 100 through 200 (inclusive), 300
through 320 (inclusive) and 350. Then you can write the string
"100-200,300-320,350" to the file. When reading the file, any individual
integers will be read as a "start-end" range where the start and end are equal.
The example above would be read as "100-200,300-320,350-350".

The controller imposes the invariant that the ranges allowed by any cgroup must
be a subset (or equal set) of the ranges allowed by its parent (i.e., a cgroup
does not allow any integers not allowed by its parent cgroup). This constraint
allows you to ensure that not only are the processes in any given cgroup
contrained by its ranges, but so are the processes in any of the cgroup's
descendants. The way this is enforced is by two things: 1) when a cgroup is
initialized, its ranges are inherited from its parent, and 2) when attempting to
set the ranges of a cgroup, the kernel ensures that the invariant is true for
the current cgroup and all its children, or otherwise fails to change the ranges
with error EINVAL.
