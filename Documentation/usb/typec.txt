USB Type-C connector class
==========================

Introduction
------------
The typec class is meant for describing the USB Type-C ports in a system to the
user space in unified fashion. The class is designed to provide nothing else
except the user space interface implementation in hope that it can be utilized
on as many platforms as possible.

The platforms are expected to register every USB Type-C port they have with the
class. In a normal case the registration will be done by a USB Type-C or PD PHY
driver, but it may be a driver for firmware interface such as UCSI, driver for
USB PD controller or even driver for Thunderbolt3 controller. This document
considers the component registering the USB Type-C ports with the class as "port
driver".

On top of showing the capabilities, the class also offer user space control over
the roles and alternate modes of ports, partners and cable plugs when the port
driver is capable of supporting those features.

The class provides an API for the port drivers described in this document. The
attributes are described in Documentation/ABI/testing/sysfs-class-typec.


Interface
---------
Every port will be presented as its own device under /sys/class/typec/. The
first port will be named "port0", the second "port1" and so on.

When connected, the partner will be presented also as its own device under
/sys/class/typec/. The parent of the partner device will always be the port. The
partner attached to port "port0" will be named "port0-partner". Full path to the
device would be /sys/class/typec/usb0/usb0-partner/.

The cable and the two plugs on it may also be optionally presented as their own
devices under /sys/class/typec/. The cable attached to the port "port0" port
will be named port0-cable and the plug on the SOP Prime end (see USB Power
Delivery Specification ch. 2.4) will be named "port0-plug0" and on the SOP
Double Prime end "port0-plug1". The parent of a cable will always be the port,
and the parent of the cable plugs will always be the cable.

If the port, partner or cable plug support Alternate Modes, every Alternate Mode
SVID will have their own device describing them. The Alternate Modes will not be
attached to the typec class. For the port's "port0" partner, the Alternate Modes
would have devices presented under /sys/class/typec/port0-partner/. Every mode
that is supported will have its own group under the Alternate Mode device named
"mode<index>". For example /sys/class/typec/port0/port0.svid:xxxx/mode0/. The
requests for entering/exiting a mode happens with "active" attribute file in
that group.


API
---

The functions and structures of the class are defined in
linux/include/usb/typec.h header.


* Registering the ports

The port drivers will describe every Type-C port they control with struct
typec_capability data structure, and register them with the following API:

struct typec_port *typec_register_port(struct device *parent,
				       const struct typec_capability *cap);

The class will provide handle to struct typec_port on success and NULL on
failure. The un-registration of the port happens with the following API:

void typec_unregister_port(struct typec_port *port);

When registering the ports, the prefer_role member in struct typec_capability
deservers special notice. If the port that is being registered does not have
initial role preference, which means the port does not execute Try.SNK or
Try.SRC by default, the member must have value TYPEC_NO_PREFERRED_ROLE.
Otherwise if the port executes Try.SNK by default the member must have value
TYPEC_DEVICE and with Try.SRC the value must be TYPEC_HOST.


* Registering Partners

After successful connection of a partner, the port driver needs to register the
partner with the class. Details about the partner need to be described in struct
typec_partner_desc. The class copies the details of the partner during
registration. The class offers the following API for registering/unregistering
partners.

struct typec_partner *typec_register_partner(struct typec_port *port,
					     struct typec_partner_desc *desc);
void typec_unregister_partner(struct typec_partner *partner);

The class will provide a handle to struct typec_partner if the registration was
successful, or NULL.


* Registering Cables

After successful connection of a cable that supports USB Power Delivery
Structured VDM Discover Identity, the port driver needs to register the cable
and one or maximum two plugs the cable has with the class. Details about the
cable need to be described in struct typec_cable_desc and about the plug in
struct typec_plug_desc. The class copies the details during registration. The
class offers the following API for registering/unregistering cables and their
plugs:

struct typec_cable *typec_register_cable(struct typec_port *port,
					 struct typec_cable_desc *desc);
void typec_unregister_cable(struct typec_cable *cable);

struct typec_plug *typec_register_plug(struct typec_cable *cable,
				       struct typec_plug_desc *desc);
void typec_unregister_plug(struct typec_plug *plug);

The class will provide a handle to struct typec_cable and struct typec_plug if
the registration is successful, or NULL if it isn't.


* Notifications

When the partner end has executed a role change, or when the default roles change
during connection of a partner or cable, the port driver must use the following
APIs to report it to the class:

void typec_set_data_role(struct typec_port *, enum typec_data_role);
void typec_set_pwr_role(struct typec_port *, enum typec_role);
void typec_set_vconn_role(struct typec_port *, enum typec_role);
void typec_set_pwr_opmode(struct typec_port *, enum typec_pwr_opmode);


* Alternate Modes

USB Type-C Ports, Partners and Cable Plugs may support Alternate Modes with USB
Type-C. Each Alternate Mode will have SVID, which is either a Standard ID given
by USB-IF or vendor ID. Each SVID will support 1 - 7 modes. The class provides
struct typec_mode_desc for describing individual mode of a SVID, and struct
typec_altmode_desc which is a container of all the modes of a SVID that a
port, partner or cable plug supports.

Ports that support Alternate Modes need to register each SVID they support with
the following API:

struct typec_altmode
*typec_port_register_altmode(struct typec_port *port,
			     struct typec_altmode_desc *desc);

If a partner or cable plug provides a list of SVIDs as response to USB Power
Delivery Structured VDM Discover SVIDs message, each SVID needs to be registered
with the following API.

API for the partners:

struct typec_altmode
*typec_partner_register_altmode(struct typec_partner *partner,
				struct typec_altmode_desc *desc);

API for the Cable Plugs:

struct typec_altmode
*typec_plug_register_altmode(struct typec_plug *plug,
			     struct typec_altmode_desc *desc);

So ports, partners and cable plugs will register the alternate modes with their
own functions, but the registration will always return a handle to struct
typec_altmode on success, or NULL. The unregistration will happen with the same
function:

void typec_unregister_altmode(struct typec_altmode *altmode);

If a partner or cable plug enters or exits a mode, the port driver needs to
notify the class with the following API:

void typec_altmode_update_active(struct typec_altmode *alt, int mode,
				 bool active);
