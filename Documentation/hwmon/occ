Kernel driver occ
=================

Supported chips:
 * ASPEED AST2400
 * ASPEED AST2500

Please note that the chip must be connected to a POWER8 or POWER9 processor
(see the BMC - Host Communications section).

Author: Eddie James <eajames@us.ibm.com>

Description
-----------

This driver implements support for the OCC (On-Chip Controller) on the IBM
POWER8 and POWER9 processors, from a BMC (Baseboard Management Controller). The
OCC is an embedded processor that provides real time power and thermal
monitoring.

This driver provides an interface on a BMC to poll OCC sensor data, set user
power caps, and perform some basic OCC error handling.

Currently, all versions of the OCC support four types of sensor data: power,
temperature, frequency, and "caps," which indicate limits and thresholds used
internally on the OCC.

The format for the POWER8 OCC sensor data can be found in the P8 OCC
specification:
github.com/open-power/docs/blob/master/occ/OCC_OpenPwr_FW_Interfaces.pdf
This document provides the details of the OCC sensors: power, frequency,
temperature, and caps. These sensor formats are specific to the POWER8 OCC. A
number of data structures, such as command format, response headers, and the
like, are also defined in this specification, and are common to both POWER8 and
POWER9 OCCs.

sysfs Entries
-------------

The OCC driver uses the hwmon sysfs framework to provide data to userspace.

The driver exports two sysfs files for each frequency, temperature, and power
sensor. These are "input" and "label". The input file contains the value of the
sensor. The label file contains the sensor id. The sensor id is the unique
internal OCC identifier. Sensor ids may be provided by the OCC specification.
The names of these files will be in the following format:
	<sensor type><sensor index>_input
	<sensor type><sensor index>_label
Sensor types will be one of "temp", "freq", or "power". The sensor index is
an index to differentiate different sensor files. For example, a single
temperature sensor will have two sysfs files: temp1_input and temp1_label.

Caps sensors are exported differently. For each caps sensor, the driver will
export 6 entries:
	curr_powercap - current power cap in watts
	curr_powerreading - current power output in watts
	norm_powercap - power cap without redundant power
	max_powercap - maximum power cap that can be set in watts
	min_powercap - minimum power cap that can be set in watts
	user_powerlimit - power limit specified by the user in watts
In addition, the OCC driver for P9 will export a 7th entry:
	user_powerlimit_source - can be one of two values depending on who set
		the user_powerlimit. 0x1 - out of band from BMC or host. 0x2 -
		in band from other source.
The format for these files is caps<sensor index>_<entry type>. For example,
caps1_curr_powercap.

The driver also provides a number of sysfs entries through hwmon to better
control the driver and monitor the OCC.
	powercap - read or write the OCC user power limit in watts.
	name - read the name of the driver
	update_interval - read or write the minimum interval for polling the
		OCC.

The driver also exports a single sysfs file through the communication protocol
device (see BMC - Host Communications). The filename is "online" and represents
the status of the OCC with respect to the driver. The OCC can be in one of two
states: OCC polling enabled or OCC polling disabled. The purpose of this file
is to control the behavior of the driver and it's hwmon sysfs entries, not to
infer any information about the state of the physical OCC. Reading the file
returns either a 0 (polling disabled) or 1 (polling enabled). Writing 1 to the
file enables OCC polling in the driver if communications can be established
with the OCC. Writing a 0 to the driver disables OCC polling.

BMC - Host Communications
-------------------------

For the POWER8 application, the BMC can communicate with the P8 over I2C bus.
However, to access the OCC register space, any data transfer must use a SCOM
operation. SCOM is a procedure to initiate a data transfer, typically of 8
bytes. SCOMs consist of writing a 32-bit command register and then
reading/writing two 32-bit data registers. This driver implements these
SCOM operations over I2C bus in order to communicate with the OCC.

For the POWER9 application, the BMC can communicate with the P9 over FSI bus
and SBE engine. Once again, SCOM operations are required. This driver will
implement SCOM ops over FSI/SBE. This will require the FSI driver.
